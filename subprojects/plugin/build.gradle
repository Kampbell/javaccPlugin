plugins {
    id "com.jfrog.bintray" version "1.0"
    id "com.github.kt3k.coveralls" version "2.0.1x"
}

apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'jacoco'
apply plugin: 'maven'

defaultTasks 'clean', 'build', 'install'

dependencies {
    compile gradleApi()
    compile group: 'net.java.dev.javacc', name: 'javacc', version: '6.1.2'
    
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.8'
    testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '1.6.0'
    testCompile group: 'org.powermock', name: 'powermock-api-mockito', version: '1.6.0'
}

eclipse {
    project {    
        name = 'javacc-gradle-plugin'
    }
}

test {
    maxParallelForks = 10
    forkEvery = 50
}

jar {
    manifest {
        attributes 'Implementation-Title': 'javacc-gradle-plugin', 'Implementation-Version': version
    }
}

checkstyle {
    configFile = file("${project.projectDir}/config/checkstyle/checks.xml")
}

findbugs {
    toolVersion = '2.0.3'
    sourceSets = [sourceSets.main, sourceSets.test]
    effort = "min"
    ignoreFailures = true
    reportLevel = "high"
    excludeFilter = file("${project.projectDir}/config/findbugs/exclude.xml")
}

tasks.withType(FindBugs) {
    maxHeapSize = project.hasProperty('findBugsHeapSize') ? project.findBugsHeapSize : '1g'
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) { 
     classifier = 'javadoc' 
     from javadoc.destinationDir 
} 

artifacts {
    archives sourceJar
    archives javadocJar
}

bintray {
    if (!project.hasProperty('bintrayUser')) {
        ext.bintrayUser = ''
    }
    
    if (!project.hasProperty('bintrayApiKey')) {
        ext.bintrayApiKey = ''
    }
    
    if (!project.hasProperty('ossrhUsername')) {
        ext.ossrhUsername = ''
    }
    
    if (!project.hasProperty('ossrhPassword')) {
        ext.ossrhPassword = ''
    }
    
    if (!project.hasProperty('releaseVersion')) {
        ext.releaseVersion = ''
    }
    
    if (!project.hasProperty('gpgPassphrase')) {
        ext.gpgPassphrase = ''
    }
    
    user = bintrayUser
    key = bintrayApiKey

    configurations = ['archives']
    dryRun = false
    publish = true
    pkg {
        repo = 'maven'
        name = 'javacc-gradle-plugin'
        desc = 'Provides the ability to use JavaCC via Gradle. If the java plugin is also applied, JavaCompile tasks will depend upon the compileJavacc task.'
        websiteUrl = 'https://github.com/johnmartel/javaccPlugin'
        issueTrackerUrl = 'https://github.com/johnmartel/javaccPlugin/issues'
        vcsUrl = 'https://github.com/johnmartel/javaccPlugin.git'
        licenses = ['MIT']
        labels = ['javacc', 'gradle']
        publicDownloadNumbers = true
        
        version {
            name = releaseVersion
            released = new Date()
            vcsTag = 'javacc-gradle-plugin-' + releaseVersion
            attributes = ['gradle-plugin': 'ca.coglinc.javacc:ca.coglinc:javacc-gradle-plugin']
            gpg {
                sign = true
                passphrase = gpgPassphrase
            }
            mavenCentralSync {
                sync = true
                user = ossrhUsername
                password = ossrhPassword
                close = '1'
            }
        }
    }
}
