apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'signing'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.5'
    }
}
apply plugin: 'com.jfrog.bintray'

sourceCompatibility = 1.6
targetCompatibility = 1.6
group = 'ca.coglinc'
version = '2.0.0'

repositories {
    mavenCentral()
}

dependencies {
    compile gradleApi()
    compile group: 'net.java.dev.javacc', name: 'javacc', version: '6.1.2'
     
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.5'
}

eclipse {
    project {    
        name = 'javacc-gradle-plugin'
    }
      
    classpath {
        defaultOutputDir = file('build-eclipse')
        downloadSources = true
        downloadJavadoc = true
    }
}

compileJava {
    options.encoding = 'UTF-8'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

jar {
    manifest {
        attributes 'Implementation-Title': 'javacc-gradle-plugin', 'Implementation-Version': version
    }
}

checkstyle {
    configFile = new File("${project.projectDir}/config/checkstyle/checks.xml")
}

findbugs {
    sourceSets = [sourceSets.main, sourceSets.test]
    effort = "min"
    ignoreFailures = true
    reportLevel = "high"
    excludeFilter = file("${project.projectDir}/config/findbugs/exclude.xml")
}

tasks.withType(FindBugs) {
    maxHeapSize = project.hasProperty('findBugsHeapSize') ? project.findBugsHeapSize : '1g'
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn:javadoc) { 
     classifier = 'javadoc' 
     from javadoc.destinationDir 
} 

artifacts {
    archives sourceJar
    archives javadocJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    if (!project.hasProperty('ossrhUsername')) {
        ext.ossrhUsername = ''
    }
    
    if (!project.hasProperty('ossrhPassword')) {
        ext.ossrhPassword = ''
    }
                
    repositories {
        mavenDeployer {
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
            }
            
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }
        
            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }
            
            pom.project {
                packaging 'jar'
                name 'javacc-gradle-plugin'
                description 'Provides the ability to use JavaCC with Gradle. Compiles JavaCC files to Java.'
                url 'https://github.com/johnmartel/javaccPlugin'
                licenses {
                    license {
                        name 'The MIT License (MIT)'
                        url 'http://opensource.org/licenses/MIT'
                        distribution 'repo'
                    }
                }
                scm {
                    url 'https://github.com/johnmartel/javaccPlugin'
                    connection 'scm:https://johnmartel@github.com/johnmartel/javaccPlugin.git'
                    developerConnection 'scm:git://github.com/johnmartel/javaccPlugin.git' 
                }
                developers {
                    developer {
                        id 'jmartel'
                        name 'Jonathan Martel'
                        email 'jonathan.martel@coglinc.ca'
                    }
                }
            }
        }  
    }  
}

bintray {
    if (!project.hasProperty('bintrayUser')) {
        ext.bintrayUser = ''
    }
    
    if (!project.hasProperty('bintrayApiKey')) {
        ext.bintrayApiKey = ''
    }
    
    user = bintrayUser
    key = bintrayApiKey

    configurations = ['archives']
    dryRun = false
    publish = true
    pkg {
        repo = 'maven'
        name = 'javacc-gradle-plugin'
        desc = 'Provides the ability to use JavaCC via Gradle. If the java plugin is also applied, JavaCompile tasks will depend upon the compileJavacc task.'
        websiteUrl = 'https://github.com/johnmartel/javaccPlugin'
        issueTrackerUrl = 'https://github.com/johnmartel/javaccPlugin/issues'
        vcsUrl = 'https://github.com/johnmartel/javaccPlugin.git'
        licenses = ['MIT']
        labels = ['javacc', 'gradle']
        publicDownloadNumbers = true
        
        version {
            name = '2.0.0'
            vcsTag = '2.0.0'
            attributes = ['gradle-plugin': 'ca.coglinc.javacc:ca.coglinc:javacc']
        }
    }
}
