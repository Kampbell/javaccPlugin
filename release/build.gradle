buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.ajoberstar:gradle-git:0.9.0'
    }
}

import org.ajoberstar.grgit.Grgit

defaultTasks 'release'

compileJava.enabled = false
test.enabled = false
jar.enabled = false

eclipse {
    project {
        name = 'javacc-gradle-plugin-release'
    }
}

def releaseVersionProperty = 'releaseVersion'
def nextVersionProperty = 'nextVersion'

ext.gitRepo = Grgit.open(rootProject.projectDir)

task verifyReleaseVersions {
    description "Verifies that the [${releaseVersionProperty}] and [${nextVersionProperty}] project properties are specified"
    group 'Release'
}

verifyReleaseVersions << {
    if (!project.hasProperty(releaseVersionProperty) || !project.hasProperty(nextVersionProperty)) {
        throw new RuntimeException("[${releaseVersionProperty}] and [${nextVersionProperty}] project properties are mandatory.")
    }
}

task verifySnapshotDependencies {
    description 'Fails the build if there are SNAPSHOT dependencies.'
    group 'Release'
}

verifySnapshotDependencies << {
    configurations.each { configuration ->
        configuration.dependencies.each { dependency ->
            logger.info "Verifying [${configuration.name}] dependency [${dependency.group}]:[${dependency.name}]:[${dependency.version}]"
            
            if (dependency.version != null && dependency.version.endsWith('SNAPSHOT')) {
                throw new RuntimeException("Plugin can not be released with SNAPSHOT dependencies. See [${configuration.name}] [${dependency.group}]:[${dependency.name}]:[${dependency.version}]")
            }
        }
    }
}

project(':javacc-gradle-plugin').build.mustRunAfter project(':javacc-gradle-plugin').clean, verifyReleaseVersions, verifySnapshotDependencies

def commitChangedFiles(String commitMessage) {
    gitRepo.commit {
        message = commitMessage
        all = true
    }
    gitRepo.push {
        all = false
        remote = "${project.scmUrl}"
    }
}

task generateReadmeFileFromTemplate(type: Copy, dependsOn: verifyReleaseVersions) {
    description 'Generates the README.md file from a template.'
    group 'Release'
    
    from 'buildSrc'
    into projectDir
    include 'README.md.template'
    rename '(.*)\\.template', '$1'
    expand project.properties
}

generateReadmeFileFromTemplate << {
    commitChangedFiles("Generated README file for version ${releaseVersion}")
}

task tagRelease {
    description 'Creates a tag in SCM for the release.'
    group 'Release'
}

tagRelease << {
    gitRepo.tag.add {
        name = "javacc-gradle-plugin-${releaseVersion}"
        annotate = false
    }
    gitRepo.push {
        all = false
        remote = "${project.scmUrl}"
        tags = true
    }
}

def boolean taskNameMatchesWriteRulePattern(String taskName, String prefix, String releaseVersionProperty, String nextVersionProperty) {
    return (taskName.startsWith(prefix)
        && (taskName.toUpperCase().endsWith(releaseVersionProperty.toUpperCase()) || taskName.toUpperCase().endsWith(nextVersionProperty.toUpperCase()))
        && (tasks.findByPath(taskName) == null))
}

tasks.addRule('Pattern: write<VersionProperty>: Writes the value of VersionProperty project property to build.gradle as the project version') { taskName ->
    String prefix = 'write'
    
    if (taskNameMatchesWriteRulePattern(taskName, prefix, releaseVersionProperty, nextVersionProperty)) {
        String versionProperty = taskName - prefix
        versionProperty = versionProperty[0].toLowerCase() + versionProperty.substring(1)
        
        logger.info("Adding task ${taskName}: name matches pattern write<VersionProperty>")
    
        Task writeTask = tasks.create(name: taskName, type: Copy)
        writeTask.dependsOn verifyReleaseVersions
        writeTask.description "Writes the value of [${versionProperty}] project property to build.gradle as the project version."
        writeTask.group 'Release'
        writeTask.configure {
            from projectDir
            into buildDir
            include 'build.gradle'
            filter { line ->
                if (line.startsWith('version =')) {
                    "version = '${project.getProperty(versionProperty)}'"
                } else {
                    "${line}"
                }
            }
        }
        
        if (versionProperty.equalsIgnoreCase(releaseVersionProperty)) {
            writeTask.mustRunAfter project(':javacc-gradle-plugin').build
        } else {
            writeTask.mustRunAfter project(':javacc-gradle-plugin').build, tagRelease
        }
    }
}

def boolean taskNameMatchesCopyRulePattern(String taskName, String prefix, String suffix, String releaseVersionProperty, String nextVersionProperty) {
    return (taskName.startsWith(prefix)
        && (taskName.toUpperCase().contains((releaseVersionProperty - 'Version').toUpperCase()) || taskName.toUpperCase().contains((nextVersionProperty - 'Version').toUpperCase()))
        && taskName.endsWith(suffix)
        && (tasks.findByPath(taskName) == null))
}

tasks.addRule('Pattern: copy<VersionType>BuildFile: Overwrites build.gradle with the VersionType version value') { taskName ->
    String prefix = 'copy'
    String suffix = 'BuildFile'
    
    if (taskNameMatchesCopyRulePattern(taskName, prefix, suffix, releaseVersionProperty, nextVersionProperty)) {
        String versionType = taskName - prefix - suffix
        
        logger.info("Adding task ${taskName}: name matches pattern copy<VersionType>BuildFile")
        
        Task copyTask = tasks.create(name: taskName, type: Copy)
        copyTask.dependsOn "write${versionType}Version"
        copyTask.description "Overwrites build.gradle with the ${versionType} version value."
        copyTask.group 'Release'
        copyTask.configure {
            from buildDir
            into projectDir
            include 'build.gradle'
        }
        if (versionType.equals('Release')) {
            copyTask.doLast {
                commitChangedFiles("Updated project version for release ${project.getProperty(releaseVersionProperty)}")
            }
        } else {
            copyTask.doLast {
                commitChangedFiles("Updated project version for release ${project.getProperty(nextVersionProperty)}")
            }
        }
    }
}

tagRelease.mustRunAfter generateReadmeFileFromTemplate, copyReleaseBuildFile

task release(dependsOn: [project(':javacc-gradle-plugin').clean, verifyReleaseVersions, verifySnapshotDependencies, project(':javacc-gradle-plugin').build, generateReadmeFileFromTemplate, copyReleaseBuildFile, tagRelease, copyNextBuildFile]) {
    description "Releases the plugin by verifying there are no snapshot dependencies, writing the next version to build.gradle and committing the build file. " +
        "Versions must be specified by using the [${releaseVersionProperty}] and [${nextVersionProperty}] project properties."
    
    group 'Release'
    
    if (project.hasProperty(releaseVersionProperty)) {
        version = project.getProperty(releaseVersionProperty)
    }
    println "Changing project's version to [${version}]"
}
    