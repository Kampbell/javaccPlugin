apply from: 'build.gradle'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.ajoberstar:gradle-git:0.9.0'
    }
}

import org.ajoberstar.grgit.Grgit

defaultTasks 'release'

def releaseVersionProperty = 'releaseVersion'
def nextVersionProperty = 'nextVersion'

task verifyReleaseVersions {
    description "Verifies that the [${releaseVersionProperty}] and [${nextVersionProperty}] project properties are specified"
    group 'Release'
}

verifyReleaseVersions << {
    if (!project.hasProperty(releaseVersionProperty) || !project.hasProperty(nextVersionProperty)) {
        throw new RuntimeException("[${releaseVersionProperty}] and [${nextVersionProperty}] project properties are mandatory.")
    }
}

task verifySnapshotDependencies {
    description 'Fails the build if there are SNAPSHOT dependencies.'
    group 'Release'
}

verifySnapshotDependencies << {
    configurations.each { configuration ->
        configuration.dependencies.each { dependency ->
            logger.info "Verifying [${configuration.name}] dependency [${dependency.group}]:[${dependency.name}]:[${dependency.version}]"
            
            if (dependency.version != null && dependency.version.endsWith('SNAPSHOT')) {
                throw new RuntimeException("Plugin can not be released with SNAPSHOT dependencies. See [${configuration.name}] [${dependency.group}]:[${dependency.name}]:[${dependency.version}]")
            }
        }
    }
}

build.mustRunAfter clean, verifyReleaseVersions, verifySnapshotDependencies

task writeNextVersion(type: Copy, dependsOn: verifyReleaseVersions) {
    description "Writes the value of [${nextVersionProperty}] project property to build.gradle as the project version."
    group 'Release'
    
    from projectDir
    into buildDir
    include 'build.gradle'
    filter { line ->
        if (line.startsWith('version =')) {
            "version = '${project.getProperty(nextVersionProperty)}'"
        } else {
            "${line}"
        }
    }
}

writeNextVersion.mustRunAfter build

task copyNextBuildFile(type: Copy, dependsOn: writeNextVersion) {
    description 'Overwrites build.gradle with the next version value.'
    group 'Release'

    from buildDir
    into projectDir
    include 'build.gradle'
}

task generateReadmeFileFromTemplate(type: Copy, dependsOn: verifyReleaseVersions) {
    description 'Generates the README.md file from a template.'
    group 'Release'
    
    from 'buildSrc'
    into projectDir
    include 'README.md.template'
    rename '(.*)\\.template', '$1'
    expand project.properties
}

task commitChangedFiles(dependsOn: [copyNextBuildFile, generateReadmeFileFromTemplate]) {
    description 'Commits files changed during the release to SCM.'
    group 'Release'
}

commitChangedFiles << {
    def gitRepo = Grgit.open(projectDir)
    gitRepo.commit {
        message = "Changed version for release ${version}"
        all = true
    }
}

task tagRelease(dependsOn: commitChangedFiles) {
    description 'Creates a tag in SCM for the release.'
    group 'Release'
}

task release(dependsOn: [clean, verifyReleaseVersions, verifySnapshotDependencies, build, copyNextBuildFile, generateReadmeFileFromTemplate, commitChangedFiles, tagRelease]) {
    description "Releases the plugin by verifying there are no snapshot dependencies, writing the next version to build.gradle and committing the build file. " +
        "Versions must be specified by using the [${releaseVersionProperty}] and [${nextVersionProperty}] project properties."
    
    group 'Release'
    
    if (project.hasProperty(releaseVersionProperty)) {
        version = project.getProperty(releaseVersionProperty)
    }
    println "Changing project's version to [${version}]"
}
    